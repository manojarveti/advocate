import { MarkType, Mark, NodeType } from 'prosemirror-model';
import { EditorState } from 'prosemirror-state';
import { AlignRule } from './config/align-rules';
import { LinkData } from './common/link-data.interface';
import { Command, DispatchFn } from './common/commands';
import { ImageData } from './common/image-data.interface';
import { IndentRule } from './config/indent-rules';
/**
 * @hidden
 */
export interface ActiveMarks {
    marks: Mark[];
    hasNodesWithoutMarks: boolean;
}
/**
 * @hidden
 */
export declare const getUniqueStyleValues: (style: ActiveMarks, cssStyle: string) => string;
/**
 * @hidden
 */
export declare function isMarkActive(state: EditorState, markType: MarkType): boolean;
/**
 * @hidden
 */
export declare function isNodeActive(state: EditorState, nodeType: NodeType, attrs?: Object): boolean;
/**
 * @hidden
 */
export declare const isInListOfType: ({selection}: any, nodeType: any) => boolean;
/**
 * @hidden
 */
export declare const getActiveMarks: ({selection}: any, markType?: any) => ActiveMarks;
/**
 * @hidden
 */
export declare function activeNodeName(state: EditorState): {
    name: string;
    tag: string;
};
/**
 * @hidden
 */
export declare function canIndent(state: EditorState, nodeType: NodeType): boolean;
/**
 * @hidden
 */
export declare function canOutdent(state: EditorState, nodeType: NodeType): boolean;
/**
 * @hidden
 */
export declare function findParentNode(predicate: (condition: any) => boolean): Function;
/**
 * @hidden
 */
export declare function findNthParentNode(predicate: (condition: any) => boolean, depth?: number): Function;
/**
 * @hidden
 */
export declare function findNthParentNodeOfType(nodeType: NodeType, depth?: number): Function;
/**
 * @hidden
 */
export declare const getMark: (state: any, markType: any) => any;
/**
 * @hidden
 */
export declare const getNodeFromSelection: (state: any) => any;
/**
 * @hidden
 */
export declare const getSelectionText: (state: any) => String;
/**
 * @hidden
 */
export declare const removeMark: (markType: any) => Command;
/**
 * @hidden
 */
export declare const toggleBold: any;
/**
 * @hidden
 */
export declare const toggleItalic: any;
/**
 * @hidden
 */
export declare const toggleUnderline: any;
/**
 * @hidden
 */
export declare const toggleStrikethrough: any;
/**
 * @hidden
 */
export declare const toggleSubscript: any;
/**
 * @hidden
 */
export declare const toggleSuperscript: any;
/**
 * @hidden
 */
export declare const setFontFamily: (font: string) => Command;
/**
 * @hidden
 */
export declare const setFontSize: (size: number) => Command;
/**
 * @hidden
 */
export declare const createLink: (attrs: LinkData) => Command;
/**
 * @hidden
 */
export declare const applyHeading: (level: number) => any;
/**
 * @hidden
 */
export declare const applyParagraph: any;
/**
 * @hidden
 */
export declare const applyBlockquote: any;
/**
 * @hidden
 */
export declare const format: ({tag}: {
    tag: string;
}) => Command;
/**
 * @hidden
 */
export declare const insertImage: (attrs: ImageData) => Command;
/**
 * @hidden
 */
export declare const getHTML: (state: any) => string;
/**
 * @hidden
 */
export declare const createContentNode: (value: string) => any;
/**
 * @hidden
 */
export declare const setHTML: (content: string) => Command;
/**
 * @hidden
 */
export declare const hasSameMarkup: (dom1: string, dom2: string) => boolean;
/**
 * @hidden
 * Aligning block elements in the selection.
 *
 * @returns {boolean} - Returns true if any alignment is applied.
 */
export declare const alignBlocks: (actions: AlignRule[]) => (state: any, dispatch: DispatchFn) => boolean;
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
export declare const isAligned: (state: any, actions: AlignRule[]) => boolean;
/**
 * @hidden
 * Indenting block elements in the selection.
 *
 * @returns {boolean} - Returns true if any indentation is applied.
 */
export declare const indentBlocks: (actions: IndentRule[]) => (state: any, dispatch: DispatchFn) => boolean;
/**
 * @hidden
 * Checks if any block element in the selection is indented.
 */
export declare const isIndented: (state: any, actions: IndentRule[]) => boolean;
/**
 * @hidden
 */
export declare const canIndentAsListItem: (state: any) => boolean;
/**
 * @hidden
 */
export declare const canOutdentAsListItem: (state: any) => boolean;
/**
 * @hidden
 */
export declare const canBeIndented: (state: any, rules: IndentRule[]) => boolean;
/**
 * @hidden
 */
export declare const indent: (state: any, dispatch: DispatchFn) => void;
/**
 * @hidden
 */
export declare const outdent: (state: any, dispatch: DispatchFn) => void;
