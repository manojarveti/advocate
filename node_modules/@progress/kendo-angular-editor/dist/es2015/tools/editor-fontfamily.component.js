import { Component, ViewChild, forwardRef, Input, Output, Host, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { outerWidth, isPresent } from '../util';
import { EditorComponent } from '../editor.component';
import { getUniqueStyleValues } from '../prosemirror-utils';
/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-toolbar-dropdownlist` with an Editor command that changes the font family of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFontFamily></kendo-toolbar-dropdownlist>
 * ```
 */
export class EditorFontFamilyComponent extends ToolBarToolComponent {
    constructor(editor) {
        super();
        this.editor = editor;
        /**
         * Overrides the default font list.
         *
         */
        this.fonts = [
            { text: 'Arial', fontName: 'Arial,"Helvetica Neue",Helvetica,sans-serif' },
            { text: 'Courier New', fontName: '"Courier New",Courier,"Lucida Sans Typewriter","Lucida Typewriter",monospace' },
            { text: 'Georgia', fontName: 'Georgia,Times,"Times New Roman",serif' },
            {
                text: 'Impact',
                fontName: 'Impact,Haettenschweiler,"Franklin Gothic Bold",Charcoal,"Helvetica Inserat","Bitstream Vera Sans Bold","Arial Black","sans serif"'
            },
            { text: 'Lucida Console', fontName: '"Lucida Console","Lucida Sans Typewriter",monaco,"Bitstream Vera Sans Mono",monospace' },
            { text: 'Tahoma', fontName: 'Tahoma,Verdana,Segoe,sans-serif' },
            { text: 'Times New Roman', fontName: 'TimesNewRoman,"Times New Roman",Times,Baskerville,Georgia,serif' },
            { text: 'Trebuchet MS', fontName: '"Trebuchet MS","Lucida Grande","Lucida Sans Unicode","Lucida Sans",Tahoma,sans-serif' },
            { text: 'Verdana', fontName: 'Verdana,Geneva,sans-serif' }
        ];
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            return itemArgs.dataItem.fontName === null;
        };
        this.defaultItem = { text: 'Font name', fontName: null };
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            this.value = getUniqueStyleValues(style, 'font-family') || null;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('fontFamily', ev);
            this.editor.focus();
        }
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
}
EditorFontFamilyComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontFamilyComponent) }],
                selector: 'kendo-toolbar-dropdownlist[kendoEditorFontFamily]',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [textField]="'text'"
                [valueField]="'fontName'"
                [data]="fonts"
                [(value)]="value"
                [valuePrimitive]="true"
                [itemDisabled]="itemDisabled"
                (valueChange)="onValueChange($event)"
            >
                <ng-template kendoDropDownListItemTemplate let-dataItem>
                    <span [ngStyle]="{ 'font-family': dataItem.fontName }">
                        {{ dataItem.text }}
                    </span>
                </ng-template>
            </kendo-dropdownlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorFontFamilyComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host },] },
];
EditorFontFamilyComponent.propDecorators = {
    'fonts': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
    'element': [{ type: ViewChild, args: ['element',] },],
};
